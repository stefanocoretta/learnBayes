{
  "hash": "4af909e2fc782d1cb2721dce21b41ecf",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to Bayesian Linear Models\"\nsubtitle: \"03 - Priors\"\nauthor: \"Stefano Coretta\"\ninstitute: \"University of Edinburgh\"\neditor: source\nformat:\n  mono-light-revealjs:\n    theme: [default, custom.scss]\n    history: false\nfilters:\n  - tachyonsextra\nexecute: \n  echo: true\n---\n\n\n\n::: {.cell}\n\n:::\n\n\n## Bayesian belief update\n\n![](/img/prior-update.png){fig-align=\"center\"}\n\n## \n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<section id=\"Priors\" data-background-iframe=\"https://seeing-theory.brown.edu/bayesian-inference/index.html#section3\" data-background-interactive>\n</section>\n```\n\n:::\n:::\n\n\n## Let's start small\n\n$$\\text{RT}_i \\sim Gaussian(\\mu, \\sigma)$$\n\n. . .\n\n::: box-note\n-   $\\text{RT}_i$: Reaction Times\n\n-   $\\sim$: distributed according to a\n\n-   $Gaussian()$: Gaussian distribution\n\n-   with mean $\\mu$ and standard deviation $\\sigma$\n:::\n\n. . .\n\n::: box-warning\nWe **assume** RTs are distributed according to a Gaussian distribution (the assumption can be wrong)\n\n...and in fact it is (RTs are not Gaussian, but we will get to that later).\n:::\n\n## \n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<section id=\"Priors\" data-background-iframe=\"https://seeing-theory.brown.edu/probability-distributions/index.html#section2\" data-background-interactive>\n</section>\n```\n\n:::\n:::\n\n\n## The empirical rule\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](03_priors_files/figure-revealjs/empirical-rule-1-1.png){width=960}\n:::\n:::\n\n\n## The empirical rule\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](03_priors_files/figure-revealjs/empirical-rule-2-1.png){width=960}\n:::\n:::\n\n\n## The empirical rule\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](03_priors_files/figure-revealjs/empirical-rule-3-1.png){width=960}\n:::\n:::\n\n\n## The empirical rule\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](03_priors_files/figure-revealjs/empirical-rule-4-1.png){width=960}\n:::\n:::\n\n\n## The empirical rule\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](03_priors_files/figure-revealjs/empirical-rule-5-1.png){width=960}\n:::\n:::\n\n\n## Distribution of RTs\n\n$$\\text{RT}_i \\sim Gaussian(\\mu, \\sigma)$$\n\n<br> <br> <br>\n\nPick a $\\mu$ and $\\sigma$.\n\nReport them here: <https://forms.gle/M7juHsxyv5Vbs7Gx7>.\n\n## Let's see what we got!\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](03_priors_files/figure-revealjs/rt-sheet-1.png){width=960}\n:::\n:::\n\n\n## Distribution of RTs\n\n$$\\text{RT}_i \\sim Gaussian(\\mu, \\sigma)$$\n\n$$\\mu = ...?$$\n\n$$\\sigma = ...?$$\n\n. . .\n\n::: box-tip\nWhen uncertain, use probabilities!\n:::\n\n## Priors of the parameters\n\n$$\n\\begin{align}\n\\text{RT}_i & \\sim Gaussian(\\mu, \\sigma)\\\\\n\\mu & \\sim Gaussian(\\mu_1, \\sigma_1)\\\\\n\\sigma & \\sim Cauchy_{+}(0, \\sigma_2)\\\\\n\\end{align}\n$$\n\n. . .\n\n::: box-note\nLet's pick $\\mu_1$ and $\\sigma_1$.\n\nWe can use the empirical rule.\n:::\n\n## Prior for $\\mu$\n\n$$\n\\begin{align}\n\\text{RT}_i & \\sim Gaussian(\\mu, \\sigma)\\\\\n\\mu & \\sim Gaussian(\\mu_1, \\sigma_1)\\\\\n\\sigma & \\sim Cauchy_{+}(0, \\sigma_2)\\\\\n\\end{align}\n$$\n\n::: box-note\n-   Let's say that the mean is between 500 and 2500 ms at 95% confidence.\n\n-   Get $\\mu_1$\n\n    -   `mean(c(500, 2500))` = 1500\n\n-   Get $\\sigma_1$\n\n    -   `(2500 - 1500) / 2` = 500\n:::\n\n## Prior for $\\mu$\n\n$$\n\\begin{align}\n\\text{RT}_i & \\sim Gaussian(\\mu, \\sigma)\\\\\n\\mu & \\sim Gaussian(\\mu_1 = 1500, \\sigma_1 = 500)\\\\\n\\sigma & \\sim Cauchy_{+}(0, \\sigma_2)\\\\\n\\end{align}\n$$\n\n## Prior for $\\mu$: plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(tibble(x = c(-100, 3100)), aes(x = x)) +\n  stat_function(fun = dnorm, geom = \"area\", fill = \"lightblue\",\n                args = list(1500, 500))\n```\n\n::: {.cell-output-display}\n![](03_priors_files/figure-revealjs/mu-prior-plot-1.png){width=960}\n:::\n:::\n\n\n## Prior for $\\sigma$\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# library(HDInterval)\n\nround(inverseCDF(c(0.025, 0.5, 0.975), ptrunc, spec = \"cauchy\", a = 0, scale = 10))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]   0  10 255\n```\n\n\n:::\n\n```{.r .cell-code}\nround(inverseCDF(c(0.025, 0.5, 0.975), ptrunc, spec = \"cauchy\", a = 0, scale = 25))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]   1  25 636\n```\n\n\n:::\n\n```{.r .cell-code}\nround(inverseCDF(c(0.025, 0.5, 0.975), ptrunc, spec = \"cauchy\", a = 0, scale = 50))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]    2   50 1273\n```\n\n\n:::\n:::\n\n\n## Prior for $\\sigma$: plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(tibble(x = c(0, 500)), aes(x = x)) +\n  stat_function(fun = dcauchy, geom = \"area\", fill = \"tomato4\",\n                args = list(0, 25))\n```\n\n::: {.cell-output-display}\n![](03_priors_files/figure-revealjs/sigma-prior-plot-1.png){width=960}\n:::\n:::\n\n\n## Prior predictive checks: sample prior\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbrm_3_priorpp <- brm(\n  RT ~ 1,\n  family = gaussian,\n  prior = c(\n    prior(normal(1500, 500), class = Intercept),\n    prior(cauchy(0, 25), class = sigma)\n  ),\n  data = mald,\n  sample_prior = \"only\",\n  cores = 4,\n  file = \"data/cache/brm_3_priorpp\",\n  seed = my_seed\n)\n```\n:::\n\n\n## Prior predictive checks: sample prior\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(brm_3_priorpp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: RT ~ 1 \n   Data: mald (Number of observations: 3000) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n          Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nIntercept  1505.95    489.24   536.86  2446.34 1.00     2753     2363\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma   270.58   5598.05     0.99   845.19 1.00     2921     2014\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n```\n\n\n:::\n:::\n\n\n\n## Prior predictive checks: plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(my_seed)\nbrm_3_pppreds <- posterior_predict(brm_3_priorpp, newdata = tibble(y = 1), ndraws = 1e3) |>\n  as.vector()\n\nggplot() +\n  aes(x = brm_3_pppreds) +\n  geom_density(fill = \"forestgreen\") +\n  geom_rug()\n```\n\n::: {.cell-output-display}\n![](03_priors_files/figure-revealjs/brm-3-priorpp-plot-1.png){width=960}\n:::\n:::\n\n\n## Prior predictive checks: plot (zoom in)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  aes(x = brm_3_pppreds) +\n  geom_density(fill = \"forestgreen\") +\n  xlim(-1000, 3500) +\n  geom_rug()\n```\n\n::: {.cell-output-display}\n![](03_priors_files/figure-revealjs/brm-3-priorpp-plot-2-1.png){width=960}\n:::\n:::\n\n\n## Run the model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbrm_3 <- brm(\n  RT ~ 1,\n  family = gaussian,\n  prior = c(\n    prior(normal(1500, 500), class = Intercept),\n    prior(cauchy(0, 25), class = sigma)\n  ),\n  data = mald,\n  cores = 4,\n  file = \"data/cache/brm_3\",\n  seed = my_seed\n)\n```\n:::\n\n\n## Model summary\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(brm_3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: RT ~ 1 \n   Data: mald (Number of observations: 3000) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n          Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nIntercept  1046.60      6.34  1034.32  1058.94 1.00     3563     2804\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma   347.51      4.45   338.90   356.76 1.00     3678     2772\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n```\n\n\n:::\n:::\n\n\n## Posterior predictive checks\n\n\n::: {.cell}\n\n```{.r .cell-code}\npp_check(brm_3, ndraws = 100)\n```\n\n::: {.cell-output-display}\n![](03_priors_files/figure-revealjs/brm-3-pp-1.png){width=960}\n:::\n:::\n\n\n## Summary\n\n::: box-note\n\n- Priors are probability distributions that convey prior knowledge about the model parameters.\n\n- Gaussian family\n  - $\\mu$: Gaussian prior.\n  - $\\sigma$: (Truncated) Cauchy prior (but also Student-t and others).\n\n- Use the empirical rule to work out Gaussian priors and the `HDIinterval::inverseCDF()` function for other families.\n\n- Prior predictive checks are fundamental and should be run during the study design, **before** data collection (or in any case without being informed by the data).\n:::\n",
    "supporting": [
      "03_priors_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}